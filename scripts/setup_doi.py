#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê DOI
============================

–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DOI —á–µ—Ä–µ–∑ Zenodo/Figshare

–ê–≤—Ç–æ—Ä: Optical Connectome Research Team
"""

import os
import shutil
import subprocess
import yaml
from datetime import datetime

def create_data_archive():
    """–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üì¶ –°–û–ó–î–ê–ù–ò–ï –ê–†–•–ò–í–ê –î–ê–ù–ù–´–•...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞
    archive_dir = "optical_connectome_data"
    if os.path.exists(archive_dir):
        shutil.rmtree(archive_dir)
    os.makedirs(archive_dir)
    
    # –§–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    files_to_copy = [
        "ds006181_fixed_metrics.csv",
        "multi_dataset_optical_metrics.csv", 
        "optical_connectome_pipeline.py",
        "create_publication_figures.py",
        "enhanced_statistics.py",
        "fix_constant_metrics.py",
        "arxiv_preprint_final.md",
        "Statistical_Report.md",
        "Figure1_Distributions.png",
        "Figure2_Correlations.png", 
        "Figure3_3D_Tracts.png",
        "Figure4_Network.png",
        "Figure5_Dataset_Comparison.png",
        "ROC_Analysis.png"
    ]
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    copied_files = []
    for file in files_to_copy:
        if os.path.exists(file):
            shutil.copy2(file, archive_dir)
            copied_files.append(file)
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ö†Ô∏è  {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –∞—Ä—Ö–∏–≤–∞
    readme_content = f"""# Optical Connectome Analysis Dataset

## –û–ø–∏—Å–∞–Ω–∏–µ
–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–º–∞ –º–æ–∑–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞.

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
- ds006181_fixed_metrics.csv - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (1,200 —Ç—Ä–∞–∫—Ç–æ–≤)
- multi_dataset_optical_metrics.csv - –º—É–ª—å—Ç–∏–¥–∞—Ç–∞—Å–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- *.py - –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
- *.md - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- *.png - –≥—Ä–∞—Ñ–∏–∫–∏

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
–°–º. optical_connectome_pipeline.py –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

## –õ–∏—Ü–µ–Ω–∑–∏—è
CC BY 4.0

## –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –ê–≤—Ç–æ—Ä—ã
Optical Connectome Research Team

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
[To be added upon publication]
"""
    
    with open(f"{archive_dir}/README.md", "w") as f:
        f.write(readme_content)
    
    print(f"‚úÖ README —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    archive_name = "optical_connectome_data.tar.gz"
    if os.path.exists(archive_name):
        os.remove(archive_name)
    
    subprocess.run(["tar", "-czf", archive_name, archive_dir])
    print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_name}")
    
    return archive_name, copied_files

def create_citation_file():
    """–°–æ–∑–¥–∞—Ç—å CITATION.cff —Ñ–∞–π–ª"""
    print("üìù –°–û–ó–î–ê–ù–ò–ï CITATION.CFF...")
    
    citation_data = {
        "cff-version": "1.2.0",
        "message": "If you use this software, please cite it as below.",
        "authors": [
            {
                "given-names": "Optical",
                "family-names": "Connectome Research Team",
                "orcid": "https://orcid.org/0000-0000-0000-0000"
            }
        ],
        "title": "Optical Connectome Analysis of Human Brain",
        "version": "1.0.0",
        "date-released": "2024-12-01",
        "url": "https://github.com/optical-connectome/optical-connectome-analysis",
        "license": "MIT",
        "keywords": [
            "optical connectome",
            "bio-photonic", 
            "brain",
            "MRI",
            "neuroscience"
        ]
    }
    
    with open("CITATION.cff", "w") as f:
        yaml.dump(citation_data, f, default_flow_style=False)
    
    print("‚úÖ CITATION.cff —Å–æ–∑–¥–∞–Ω")

def create_github_files():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è GitHub"""
    print("üêô –°–û–ó–î–ê–ù–ò–ï GITHUB –§–ê–ô–õ–û–í...")
    
    # .gitignore
    gitignore_content = """*.pyc
__pycache__/
*.log
.DS_Store
venv/
*.egg-info/
*.tar.gz
optical_connectome_data/
"""
    
    with open(".gitignore", "w") as f:
        f.write(gitignore_content)
    
    # README.md –¥–ª—è GitHub
    github_readme = """# Optical Connectome Analysis

## –û–ø–∏—Å–∞–Ω–∏–µ
–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–º–∞ –º–æ–∑–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ–π –ú–†–¢ –∏ –æ–ø—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –≤–æ–ª–Ω–æ–≤–æ–¥–æ–≤.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞
```bash
pip install -r requirements.txt
```

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```bash
python optical_connectome_pipeline.py
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
- 1,200 —Ç—Ä–∞–∫—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
- –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (DEA, KACI)
- –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

## –õ–∏—Ü–µ–Ω–∑–∏—è
MIT

## –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–°–º. CITATION.cff
"""
    
    with open("README.md", "w") as f:
        f.write(github_readme)
    
    # requirements.txt
    requirements = """numpy>=1.21.0
pandas>=1.3.0
matplotlib>=3.4.0
seaborn>=0.11.0
scipy>=1.7.0
scikit-learn>=1.0.0
networkx>=2.6.0
nibabel>=3.2.0
dipy>=1.4.0
"""
    
    with open("requirements.txt", "w") as f:
        f.write(requirements)
    
    print("‚úÖ GitHub —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")

def create_zenodo_metadata():
    """–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è Zenodo"""
    print("üìã –°–û–ó–î–ê–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• ZENODO...")
    
    metadata = {
        "title": "Optical Connectome Analysis Dataset",
        "description": "Complete dataset for optical connectome analysis of human brain using diffusion MRI and optical waveguide modeling",
        "creators": [
            {
                "name": "Optical Connectome Research Team",
                "affiliation": "Research Institution"
            }
        ],
        "keywords": [
            "optical connectome",
            "bio-photonic communication", 
            "brain connectivity",
            "diffusion MRI",
            "waveguide modeling",
            "neuroscience"
        ],
        "license": "CC-BY-4.0",
        "upload_type": "dataset",
        "publication_date": "2024-12-01",
        "access_right": "open"
    }
    
    with open("zenodo_metadata.json", "w") as f:
        import json
        json.dump(metadata, f, indent=2)
    
    print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Zenodo —Å–æ–∑–¥–∞–Ω—ã")

def create_upload_instructions():
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ"""
    print("üìñ –°–û–ó–î–ê–ù–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ô...")
    
    instructions = """# –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ì–†–£–ó–ö–ï –ù–ê ZENODO

## 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ
- –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: optical_connectome_data.tar.gz
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: zenodo_metadata.json
- GitHub —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã

## 2. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Zenodo
1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://zenodo.org
2. –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
3. –ù–∞–∂–∞—Ç—å "Upload"
4. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: optical_connectome_data.tar.gz
5. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å zenodo_metadata.json)
6. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
7. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å DOI

## 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–∏
–ó–∞–º–µ–Ω–∏—Ç—å –≤ arxiv_preprint_final.md:
```markdown
**DOI**: [–ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –†–ï–ê–õ–¨–ù–´–ô DOI]
```

## 4. –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub
2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
3. –û–±–Ω–æ–≤–∏—Ç—å URL –≤ —Ä—É–∫–æ–ø–∏—Å–∏

## 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
- [ ] DOI –ø–æ–ª—É—á–µ–Ω
- [ ] GitHub —Å–æ–∑–¥–∞–Ω
- [ ] –†—É–∫–æ–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- [ ] –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã

## –ì–æ—Ç–æ–≤–æ! üéâ
"""
    
    with open("UPLOAD_INSTRUCTIONS.md", "w") as f:
        f.write(instructions)
    
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê DOI")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        archive_name, copied_files = create_data_archive()
        
        # 2. –°–æ–∑–¥–∞–µ–º CITATION.cff
        create_citation_file()
        
        # 3. –°–æ–∑–¥–∞–µ–º GitHub —Ñ–∞–π–ª—ã
        create_github_files()
        
        # 4. –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Zenodo
        create_zenodo_metadata()
        
        # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        create_upload_instructions()
        
        print("\nüéâ –í–°–ï –ì–û–¢–û–í–û!")
        print("=" * 30)
        print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   - {archive_name} (–∞—Ä—Ö–∏–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)")
        print("   - CITATION.cff (—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        print("   - .gitignore (GitHub)")
        print("   - README.md (GitHub)")
        print("   - requirements.txt (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)")
        print("   - zenodo_metadata.json (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)")
        print("   - UPLOAD_INSTRUCTIONS.md (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)")
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Zenodo!")
        print("üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ UPLOAD_INSTRUCTIONS.md")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
