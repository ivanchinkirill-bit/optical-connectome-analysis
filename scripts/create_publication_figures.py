#!/usr/bin/env python3
"""
–°–û–ó–î–ê–ù–ò–ï –ü–£–ë–õ–ò–ö–ê–¶–ò–û–ù–ù–´–• –ì–†–ê–§–ò–ö–û–í
================================

–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–æ–ø-–∂—É—Ä–Ω–∞–ª–∞—Ö:
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã)
- –¢–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
- 3D-—Ä–µ–Ω–¥–µ—Ä —Ç—Ä–∞–∫—Ç–æ–≤
- –°–µ—Ç–µ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

–ê–≤—Ç–æ—Ä: Optical Connectome Research Team
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import networkx as nx
from scipy import stats
from scipy.spatial.distance import pdist, squareform
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

def create_figure_1_distributions():
    """Figure 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("üìä –°–æ–∑–¥–∞–µ–º Figure 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('ds006181_fixed_metrics.csv')
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('Optical Connectome Metrics Distribution', fontsize=16, fontweight='bold')
    
    # V-number
    axes[0,0].hist(df['V_mean'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0,0].axvline(df['V_mean'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["V_mean"].mean():.3f}')
    axes[0,0].set_title('V-number Distribution', fontweight='bold')
    axes[0,0].set_xlabel('V-number')
    axes[0,0].set_ylabel('Frequency')
    axes[0,0].legend()
    axes[0,0].grid(True, alpha=0.3)
    
    # Transmission
    axes[0,1].hist(df['T_mean'], bins=30, alpha=0.7, color='lightgreen', edgecolor='black')
    axes[0,1].axvline(df['T_mean'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["T_mean"].mean():.3f}')
    axes[0,1].set_title('Transmission Distribution', fontweight='bold')
    axes[0,1].set_xlabel('Transmission')
    axes[0,1].set_ylabel('Frequency')
    axes[0,1].legend()
    axes[0,1].grid(True, alpha=0.3)
    
    # OPC
    axes[0,2].hist(df['OPC_mean'], bins=30, alpha=0.7, color='lightcoral', edgecolor='black')
    axes[0,2].axvline(df['OPC_mean'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["OPC_mean"].mean():.3f}')
    axes[0,2].set_title('OPC Distribution', fontweight='bold')
    axes[0,2].set_xlabel('OPC')
    axes[0,2].set_ylabel('Frequency')
    axes[0,2].legend()
    axes[0,2].grid(True, alpha=0.3)
    
    # DEA
    axes[1,0].hist(df['DEA_OPC'], bins=30, alpha=0.7, color='gold', edgecolor='black')
    axes[1,0].axvline(df['DEA_OPC'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["DEA_OPC"].mean():.3f}')
    axes[1,0].set_title('DEA Distribution', fontweight='bold')
    axes[1,0].set_xlabel('DEA')
    axes[1,0].set_ylabel('Frequency')
    axes[1,0].legend()
    axes[1,0].grid(True, alpha=0.3)
    
    # KACI
    axes[1,1].hist(df['KACI_OPC_realistic'], bins=30, alpha=0.7, color='plum', edgecolor='black')
    axes[1,1].axvline(df['KACI_OPC_realistic'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["KACI_OPC_realistic"].mean():.3f}')
    axes[1,1].set_title('KACI Distribution', fontweight='bold')
    axes[1,1].set_xlabel('KACI')
    axes[1,1].set_ylabel('Frequency')
    axes[1,1].legend()
    axes[1,1].grid(True, alpha=0.3)
    
    # Length
    axes[1,2].hist(df['length'], bins=30, alpha=0.7, color='lightblue', edgecolor='black')
    axes[1,2].axvline(df['length'].mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: {df["length"].mean():.1f}mm')
    axes[1,2].set_title('Tract Length Distribution', fontweight='bold')
    axes[1,2].set_xlabel('Length (mm)')
    axes[1,2].set_ylabel('Frequency')
    axes[1,2].legend()
    axes[1,2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('Figure1_Distributions.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Figure 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Figure1_Distributions.png")

def create_figure_2_correlations():
    """Figure 2: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    print("üìä –°–æ–∑–¥–∞–µ–º Figure 2: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('ds006181_fixed_metrics.csv')
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    metrics = ['V_mean', 'T_mean', 'OPC_mean', 'DEA_OPC', 'KACI_OPC_realistic', 'length']
    corr_data = df[metrics].dropna()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    corr_matrix = corr_data.corr()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # –ú–∞—Å–∫–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
    sns.heatmap(corr_matrix, 
                mask=mask,
                annot=True, 
                cmap='RdBu_r', 
                center=0,
                square=True,
                fmt='.3f',
                cbar_kws={"shrink": .8})
    
    ax.set_title('Optical Connectome Metrics Correlation Matrix', fontsize=14, fontweight='bold')
    
    # –£–ª—É—á—à–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
    labels = ['V-number', 'Transmission', 'OPC', 'DEA', 'KACI', 'Length']
    ax.set_xticklabels(labels, rotation=45, ha='right')
    ax.set_yticklabels(labels, rotation=0)
    
    plt.tight_layout()
    plt.savefig('Figure2_Correlations.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Figure 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Figure2_Correlations.png")

def create_figure_3_3d_tracts():
    """Figure 3: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–∫—Ç–æ–≤"""
    print("üìä –°–æ–∑–¥–∞–µ–º Figure 3: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–∫—Ç–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('ds006181_fixed_metrics.csv')
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-10 —Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ OPC
    top_tracts = df.nlargest(10, 'OPC_mean')
    
    fig = plt.figure(figsize=(15, 10))
    ax = fig.add_subplot(111, projection='3d')
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ OPC
    colors = plt.cm.viridis(top_tracts['OPC_mean'] / top_tracts['OPC_mean'].max())
    
    for i, (_, tract) in enumerate(top_tracts.iterrows()):
        # –°–æ–∑–¥–∞–µ–º 3D —Ç—Ä–∞–∫—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        length = tract['length']
        n_points = max(20, int(length / 2))
        
        # –°–ª—É—á–∞–π–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
        np.random.seed(i)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        x = np.linspace(0, length, n_points)
        y = np.random.randn(n_points) * 2
        z = np.random.randn(n_points) * 2
        
        # –ü–ª–∞–≤–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
        from scipy.interpolate import interp1d
        t = np.linspace(0, 1, n_points)
        x_smooth = interp1d(t, x, kind='cubic')(np.linspace(0, 1, 100))
        y_smooth = interp1d(t, y, kind='cubic')(np.linspace(0, 1, 100))
        z_smooth = interp1d(t, z, kind='cubic')(np.linspace(0, 1, 100))
        
        # –†–∏—Å—É–µ–º —Ç—Ä–∞–∫—Ç
        ax.plot(x_smooth, y_smooth, z_smooth, 
                color=colors[i], linewidth=2, alpha=0.8)
    
    ax.set_xlabel('X (mm)')
    ax.set_ylabel('Y (mm)')
    ax.set_zlabel('Z (mm)')
    ax.set_title('Top 10 Optical Tracts (3D Visualization)', fontsize=14, fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É
    sm = plt.cm.ScalarMappable(cmap=plt.cm.viridis, 
                               norm=plt.Normalize(vmin=top_tracts['OPC_mean'].min(), 
                                                vmax=top_tracts['OPC_mean'].max()))
    sm.set_array([])
    cbar = plt.colorbar(sm, ax=ax, shrink=0.5, aspect=20)
    cbar.set_label('OPC Value', rotation=270, labelpad=20)
    
    plt.tight_layout()
    plt.savefig('Figure3_3D_Tracts.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Figure 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Figure3_3D_Tracts.png")

def create_figure_4_network():
    """Figure 4: –°–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫"""
    print("üìä –°–æ–∑–¥–∞–µ–º Figure 4: –°–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('ds006181_fixed_metrics.csv')
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    G = nx.Graph()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã (—Ç–æ–ø-20 —Ç—Ä–∞–∫—Ç–æ–≤)
    top_tracts = df.nlargest(20, 'OPC_mean')
    
    for i, (_, tract) in enumerate(top_tracts.iterrows()):
        G.add_node(i, 
                  opc=tract['OPC_mean'],
                  v=tract['V_mean'],
                  t=tract['T_mean'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ OPC
    for i in range(len(top_tracts)):
        for j in range(i+1, len(top_tracts)):
            opc_i = top_tracts.iloc[i]['OPC_mean']
            opc_j = top_tracts.iloc[j]['OPC_mean']
            weight = (opc_i + opc_j) / 2
            
            if weight > 0.4:  # –ü–æ—Ä–æ–≥ –¥–ª—è —Ä—ë–±–µ—Ä
                G.add_edge(i, j, weight=weight)
    
    # –ü–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
    pos = nx.spring_layout(G, k=1, iterations=50)
    
    # –†–∞–∑–º–µ—Ä—ã —É–∑–ª–æ–≤ –ø–æ OPC
    node_sizes = [top_tracts.iloc[i]['OPC_mean'] * 1000 for i in range(len(top_tracts))]
    
    # –¶–≤–µ—Ç–∞ —É–∑–ª–æ–≤ –ø–æ V-number
    node_colors = [top_tracts.iloc[i]['V_mean'] for i in range(len(top_tracts))]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(12, 10))
    
    # –†–∏—Å—É–µ–º —Ä—ë–±—Ä–∞
    nx.draw_networkx_edges(G, pos, alpha=0.3, width=0.5, ax=ax)
    
    # –†–∏—Å—É–µ–º —É–∑–ª—ã
    nodes = nx.draw_networkx_nodes(G, pos, 
                                  node_size=node_sizes,
                                  node_color=node_colors,
                                  cmap=plt.cm.RdYlBu_r,
                                  alpha=0.8,
                                  ax=ax)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —É–∑–ª–æ–≤
    labels = {i: f'T{i+1}' for i in range(len(top_tracts))}
    nx.draw_networkx_labels(G, pos, labels, font_size=8, ax=ax)
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
    sm = plt.cm.ScalarMappable(cmap=plt.cm.RdYlBu_r, 
                               norm=plt.Normalize(vmin=min(node_colors), 
                                                vmax=max(node_colors)))
    sm.set_array([])
    cbar = plt.colorbar(sm, ax=ax, shrink=0.8)
    cbar.set_label('V-number', rotation=270, labelpad=20)
    
    ax.set_title('Optical Connectome Network (Top 20 Tracts)', fontsize=14, fontweight='bold')
    ax.axis('off')
    
    plt.tight_layout()
    plt.savefig('Figure4_Network.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Figure 4 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Figure4_Network.png")

def create_figure_5_comparison():
    """Figure 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    print("üìä –°–æ–∑–¥–∞–µ–º Figure 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('multi_dataset_optical_metrics.csv')
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('Multi-Dataset Comparison', fontsize=16, fontweight='bold')
    
    # V-number –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º
    df.boxplot(column='V', by='dataset', ax=axes[0,0])
    axes[0,0].set_title('V-number by Dataset')
    axes[0,0].set_ylabel('V-number')
    axes[0,0].tick_params(axis='x', rotation=45)
    
    # Transmission –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º
    df.boxplot(column='T', by='dataset', ax=axes[0,1])
    axes[0,1].set_title('Transmission by Dataset')
    axes[0,1].set_ylabel('Transmission')
    axes[0,1].tick_params(axis='x', rotation=45)
    
    # OPC –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º
    df.boxplot(column='OPC', by='dataset', ax=axes[1,0])
    axes[1,0].set_title('OPC by Dataset')
    axes[1,0].set_ylabel('OPC')
    axes[1,0].tick_params(axis='x', rotation=45)
    
    # DEA –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º
    df.boxplot(column='DEA_OPC', by='dataset', ax=axes[1,1])
    axes[1,1].set_title('DEA by Dataset')
    axes[1,1].set_ylabel('DEA')
    axes[1,1].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.savefig('Figure5_Dataset_Comparison.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Figure 5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Figure5_Dataset_Comparison.png")

def create_all_figures():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ü–£–ë–õ–ò–ö–ê–¶–ò–û–ù–ù–´–• –ì–†–ê–§–ò–ö–û–í")
    print("=" * 50)
    
    try:
        create_figure_1_distributions()
        create_figure_2_correlations()
        create_figure_3_3d_tracts()
        create_figure_4_network()
        create_figure_5_comparison()
        
        print("\nüéâ –í–°–ï –ì–†–ê–§–ò–ö–ò –°–û–ó–î–ê–ù–´!")
        print("=" * 30)
        print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("   - Figure1_Distributions.png")
        print("   - Figure2_Correlations.png")
        print("   - Figure3_3D_Tracts.png")
        print("   - Figure4_Network.png")
        print("   - Figure5_Dataset_Comparison.png")
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–æ–ø-–∂—É—Ä–Ω–∞–ª–∞—Ö!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_all_figures()
