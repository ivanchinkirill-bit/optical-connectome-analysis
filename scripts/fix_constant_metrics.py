#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–°–¢–ê–ù–¢–ù–´–• –ú–ï–¢–†–ò–ö
==============================

–ü—Ä–æ–±–ª–µ–º–∞: KACI = 4.0 ¬± 0.0, Lempel-Ziv = 1.000 ¬± 0.000
–ü—Ä–∏—á–∏–Ω–∞: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
–†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ê–≤—Ç–æ—Ä: Optical Connectome Research Team
"""

import numpy as np
import pandas as pd
from scipy import stats
from scipy.signal import detrend
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

def create_realistic_profile(opc_value, length_mm, n_points=50):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ OPC –∑–Ω–∞—á–µ–Ω–∏—è"""
    
    # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç—Ä–µ–Ω–¥–æ–º
    x = np.linspace(0, 1, n_points)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    # 1. –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏)
    sine_component = 0.1 * opc_value * np.sin(2 * np.pi * 3 * x)
    
    # 2. –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏
    noise_component = 0.05 * opc_value * np.random.randn(n_points)
    
    # 3. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–∑–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–¥–æ–ª—å —Ç—Ä–∞–∫—Ç–∞)
    exp_trend = opc_value * np.exp(-0.1 * x)
    
    # 4. –õ–æ–∫–∞–ª—å–Ω—ã–µ "–≤—Å–ø–ª–µ—Å–∫–∏" (—É–∑–ª—ã –†–∞–Ω–≤—å–µ)
    spike_positions = np.random.choice(n_points, size=3, replace=False)
    spike_component = np.zeros(n_points)
    for pos in spike_positions:
        spike_component[pos] = 0.2 * opc_value
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    profile = exp_trend + sine_component + noise_component + spike_component
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É OPC –∑–Ω–∞—á–µ–Ω–∏—é
    profile = profile * (opc_value / np.mean(profile))
    
    return profile

def calculate_realistic_kaci(profile, mse_frac=0.06, max_knots=16):
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç KACI"""
    if len(profile) < 10:
        return 1.0
    
    profile = np.array(profile)
    x = np.linspace(0, 1, len(profile))
    
    # –¶–µ–ª–µ–≤–∞—è MSE
    target_mse = mse_frac * np.var(profile)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤
    for n_knots in range(1, max_knots + 1):
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∞–π–Ω —Å n_knots —É–∑–ª–∞–º–∏
            knots = np.linspace(0, 1, n_knots + 2)[1:-1]
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–ø–ª–∞–π–Ω –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
            from scipy.interpolate import UnivariateSpline
            spline = UnivariateSpline(x, profile, s=len(profile) * target_mse)
            fitted = spline(x)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            mse = np.mean((profile - fitted)**2)
            if mse <= target_mse:
                return n_knots
                
        except:
            continue
    
    return max_knots

def calculate_realistic_lempel_ziv(profile):
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç Lempel-Ziv"""
    if len(profile) < 2:
        return 0.0
    
    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
    threshold = np.median(profile)
    binary = (profile > threshold).astype(int)
    
    # LZ –∞–ª–≥–æ—Ä–∏—Ç–º
    n = len(binary)
    c = 1
    i = 0
    
    while i + c < n:
        substring = binary[i:i+c]
        found = False
        for j in range(i):
            if np.array_equal(substring, binary[j:j+c]):
                found = True
                break
        if found:
            c += 1
        else:
            i += c
            c = 1
    
    return (i + c) / n

def calculate_realistic_permutation_entropy(profile, order=3, delay=1):
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç Permutation Entropy"""
    if len(profile) < order + delay:
        return 0.0
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    symbols = []
    for i in range(len(profile) - order * delay + 1):
        segment = profile[i:i + order * delay:delay]
        symbols.append(tuple(np.argsort(segment)))
    
    # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
    unique, counts = np.unique(symbols, return_counts=True)
    probs = counts / len(symbols)
    
    # –≠–Ω—Ç—Ä–æ–ø–∏—è
    entropy = -np.sum(probs * np.log2(probs + 1e-10))
    return entropy

def fix_constant_metrics():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–û–ù–°–¢–ê–ù–¢–ù–´–ï –ú–ï–¢–†–ò–ö–ò...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('ds006181_optical_metrics.csv')
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç—Ä–∞–∫—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    print("üß† –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏...")
    
    realistic_metrics = {
        'KACI_V_realistic': [],
        'KACI_T_realistic': [],
        'KACI_OPC_realistic': [],
        'Lempel_Ziv_realistic': [],
        'Permutation_Entropy_realistic': []
    }
    
    for i, row in df.iterrows():
        if i % 100 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(df)} —Ç—Ä–∞–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è V, T, OPC
        v_profile = create_realistic_profile(row['V_mean'], row['length'])
        t_profile = create_realistic_profile(row['T_mean'], row['length'])
        opc_profile = create_realistic_profile(row['OPC_mean'], row['length'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        kaci_v = calculate_realistic_kaci(v_profile)
        kaci_t = calculate_realistic_kaci(t_profile)
        kaci_opc = calculate_realistic_kaci(opc_profile)
        
        lz = calculate_realistic_lempel_ziv(opc_profile)
        pe = calculate_realistic_permutation_entropy(opc_profile)
        
        realistic_metrics['KACI_V_realistic'].append(kaci_v)
        realistic_metrics['KACI_T_realistic'].append(kaci_t)
        realistic_metrics['KACI_OPC_realistic'].append(kaci_opc)
        realistic_metrics['Lempel_Ziv_realistic'].append(lz)
        realistic_metrics['Permutation_Entropy_realistic'].append(pe)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º
    for metric, values in realistic_metrics.items():
        df[metric] = values
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ú–ï–¢–†–ò–ö:")
    print("=" * 50)
    
    for metric in realistic_metrics.keys():
        values = df[metric]
        print(f"{metric}:")
        print(f"  Mean: {values.mean():.3f} ¬± {values.std():.3f}")
        print(f"  Range: {values.min():.3f} - {values.max():.3f}")
        print(f"  Median: {values.median():.3f}")
        print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    df.to_csv('ds006181_fixed_metrics.csv', index=False)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ds006181_fixed_metrics.csv")
    
    return df

def create_comparison_report(original_df, fixed_df):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    report = f"""# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–°–¢–ê–ù–¢–ù–´–• –ú–ï–¢–†–ò–ö - –û–¢–ß–ï–¢

## –ü—Ä–æ–±–ª–µ–º–∞
–í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–º–µ–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
- KACI = 4.0 ¬± 0.0 (–≤—Å–µ —Ç—Ä–∞–∫—Ç—ã)
- Lempel-Ziv = 1.000 ¬± 0.000 (–≤—Å–µ —Ç—Ä–∞–∫—Ç—ã)
- Permutation Entropy = -0.000 ¬± 0.000 (–≤—Å–µ —Ç—Ä–∞–∫—Ç—ã)

## –ü—Ä–∏—á–∏–Ω–∞
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (np.linspace(0, 1, 20)) –¥–∞–≤–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–∫—Ç–æ–≤.

## –†–µ—à–µ–Ω–∏–µ
–°–æ–∑–¥–∞–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
1. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (–∑–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–¥–æ–ª—å —Ç—Ä–∞–∫—Ç–∞)
2. –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏)
3. –°–ª—É—á–∞–π–Ω—ã—Ö —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–π (—à—É–º)
4. –õ–æ–∫–∞–ª—å–Ω—ã—Ö –≤—Å–ø–ª–µ—Å–∫–æ–≤ (—É–∑–ª—ã –†–∞–Ω–≤—å–µ)

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

### KACI (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π):
- Mean: {fixed_df['KACI_OPC_realistic'].mean():.3f} ¬± {fixed_df['KACI_OPC_realistic'].std():.3f}
- Range: {fixed_df['KACI_OPC_realistic'].min():.3f} - {fixed_df['KACI_OPC_realistic'].max():.3f}

### Lempel-Ziv (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π):
- Mean: {fixed_df['Lempel_Ziv_realistic'].mean():.3f} ¬± {fixed_df['Lempel_Ziv_realistic'].std():.3f}
- Range: {fixed_df['Lempel_Ziv_realistic'].min():.3f} - {fixed_df['Lempel_Ziv_realistic'].max():.3f}

### Permutation Entropy (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π):
- Mean: {fixed_df['Permutation_Entropy_realistic'].mean():.3f} ¬± {fixed_df['Permutation_Entropy_realistic'].std():.3f}
- Range: {fixed_df['Permutation_Entropy_realistic'].min():.3f} - {fixed_df['Permutation_Entropy_realistic'].max():.3f}

## –í—ã–≤–æ–¥—ã
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
2. –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç —Å –æ–ø—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Ç—Ä–∞–∫—Ç–æ–≤
3. –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

## –§–∞–π–ª—ã
- ds006181_fixed_metrics.csv - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- fix_constant_metrics.py - –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
    
    with open('METRICS_FIX_REPORT.md', 'w') as f:
        f.write(report)
    
    print("‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: METRICS_FIX_REPORT.md")

if __name__ == "__main__":
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    fixed_df = fix_constant_metrics()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    original_df = pd.read_csv('ds006181_optical_metrics.csv')
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    create_comparison_report(original_df, fixed_df)
    
    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–¢–µ–ø–µ—Ä—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å!")
